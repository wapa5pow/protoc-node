// source: health.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.example.CheckRequest', null, global);
goog.exportSymbol('proto.example.CheckResponse', null, global);
goog.exportSymbol('proto.example.Data', null, global);
goog.exportSymbol('proto.example.Data.ValueOneofCase', null, global);
goog.exportSymbol('proto.example.NestedData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.example.NestedData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.example.NestedData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.example.NestedData.displayName = 'proto.example.NestedData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.example.Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.example.Data.repeatedFields_, proto.example.Data.oneofGroups_);
};
goog.inherits(proto.example.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.example.Data.displayName = 'proto.example.Data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.example.CheckRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.example.CheckRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.example.CheckRequest.displayName = 'proto.example.CheckRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.example.CheckResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.example.CheckResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.example.CheckResponse.displayName = 'proto.example.CheckResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.example.NestedData.prototype.toObject = function(opt_includeInstance) {
  return proto.example.NestedData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.example.NestedData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.example.NestedData.toObject = function(includeInstance, msg) {
  var f, obj = {
    stringValue: jspb.Message.getFieldWithDefault(msg, 1, ""),
    int32Value: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of NestedData as accepted by the `fromObject` method.
 * @record
 */
proto.example.NestedData.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.stringValue;

  /** @type {?|undefined} */
  this.int32Value;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.example.NestedData.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.example.NestedData}
 */
proto.example.NestedData.fromObject = function(obj) {
  var msg = new proto.example.NestedData();
  obj.stringValue != null && jspb.Message.setField(msg, 1, obj.stringValue);
  obj.int32Value != null && jspb.Message.setField(msg, 2, obj.int32Value);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.example.NestedData}
 */
proto.example.NestedData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.example.NestedData;
  return proto.example.NestedData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.example.NestedData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.example.NestedData}
 */
proto.example.NestedData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInt32Value(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.example.NestedData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.example.NestedData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.example.NestedData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.example.NestedData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStringValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInt32Value();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string string_value = 1;
 * @return {string}
 */
proto.example.NestedData.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.example.NestedData} returns this
 */
proto.example.NestedData.prototype.setStringValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 int32_value = 2;
 * @return {number}
 */
proto.example.NestedData.prototype.getInt32Value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.example.NestedData} returns this
 */
proto.example.NestedData.prototype.setInt32Value = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.example.Data.repeatedFields_ = [13];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.example.Data.oneofGroups_ = [[15,16]];

/**
 * @enum {number}
 */
proto.example.Data.ValueOneofCase = {
  VALUE_ONEOF_NOT_SET: 0,
  VALUE_ONEOF_FIRST: 15,
  VALUE_ONEOF_SECOND: 16
};

/**
 * @return {proto.example.Data.ValueOneofCase}
 */
proto.example.Data.prototype.getValueOneofCase = function() {
  return /** @type {proto.example.Data.ValueOneofCase} */(jspb.Message.computeOneofCase(this, proto.example.Data.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.example.Data.prototype.toObject = function(opt_includeInstance) {
  return proto.example.Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.example.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.example.Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    boolValue: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    stringValue: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bytesValue: msg.getBytesValue_asB64(),
    int32Value: jspb.Message.getFieldWithDefault(msg, 4, 0),
    fixed32Value: jspb.Message.getFieldWithDefault(msg, 5, 0),
    uint32Value: jspb.Message.getFieldWithDefault(msg, 6, 0),
    int64Value: jspb.Message.getFieldWithDefault(msg, 7, 0),
    fixed64Value: jspb.Message.getFieldWithDefault(msg, 8, 0),
    uint64Value: jspb.Message.getFieldWithDefault(msg, 9, 0),
    floatValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    doubleValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    nestedData: (f = msg.getNestedData()) && proto.example.NestedData.toObject(includeInstance, f),
    nestedDatasList: jspb.Message.toObjectList(msg.getNestedDatasList(),
    proto.example.NestedData.toObject, includeInstance),
    mapNestedDatasMap: (f = msg.getMapNestedDatasMap()) ? f.toObject(includeInstance, proto.example.NestedData.toObject) : [],
    valueOneofFirst: jspb.Message.getFieldWithDefault(msg, 15, ""),
    valueOneofSecond: (f = msg.getValueOneofSecond()) && proto.example.NestedData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Data as accepted by the `fromObject` method.
 * @record
 */
proto.example.Data.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.boolValue;

  /** @type {?|undefined} */
  this.stringValue;

  /** @type {?|undefined} */
  this.bytesValue;

  /** @type {?|undefined} */
  this.int32Value;

  /** @type {?|undefined} */
  this.fixed32Value;

  /** @type {?|undefined} */
  this.uint32Value;

  /** @type {?|undefined} */
  this.int64Value;

  /** @type {?|undefined} */
  this.fixed64Value;

  /** @type {?|undefined} */
  this.uint64Value;

  /** @type {?|undefined} */
  this.floatValue;

  /** @type {?|undefined} */
  this.doubleValue;

  /** @type {?|undefined} */
  this.nestedData;

  /** @type {?|undefined} */
  this.nestedDatasList;

  /** @type {?|undefined} */
  this.mapNestedDatasMap;

  /** @type {?|undefined} */
  this.valueOneofFirst;

  /** @type {?|undefined} */
  this.valueOneofSecond;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.example.Data.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.example.Data}
 */
proto.example.Data.fromObject = function(obj) {
  var msg = new proto.example.Data();
  obj.boolValue != null && jspb.Message.setField(msg, 1, obj.boolValue);
  obj.stringValue != null && jspb.Message.setField(msg, 2, obj.stringValue);
  obj.bytesValue != null && jspb.Message.setField(msg, 3, obj.bytesValue);
  obj.int32Value != null && jspb.Message.setField(msg, 4, obj.int32Value);
  obj.fixed32Value != null && jspb.Message.setField(msg, 5, obj.fixed32Value);
  obj.uint32Value != null && jspb.Message.setField(msg, 6, obj.uint32Value);
  obj.int64Value != null && jspb.Message.setField(msg, 7, obj.int64Value);
  obj.fixed64Value != null && jspb.Message.setField(msg, 8, obj.fixed64Value);
  obj.uint64Value != null && jspb.Message.setField(msg, 9, obj.uint64Value);
  obj.floatValue != null && jspb.Message.setField(msg, 10, obj.floatValue);
  obj.doubleValue != null && jspb.Message.setField(msg, 11, obj.doubleValue);
  obj.nestedData && jspb.Message.setWrapperField(
      msg, 12, proto.example.NestedData.fromObject(obj.nestedData));
  obj.nestedDatasList && jspb.Message.setRepeatedWrapperField(
      msg, 13, obj.nestedDatasList.map(
          proto.example.NestedData.fromObject));
  obj.mapNestedDatasMap && jspb.Message.setWrapperField(
      msg, 14, jspb.Map.fromObject(obj.mapNestedDatasMap, proto.example.NestedData, proto.example.NestedData.fromObject));
  obj.valueOneofFirst != null && jspb.Message.setField(msg, 15, obj.valueOneofFirst);
  obj.valueOneofSecond && jspb.Message.setWrapperField(
      msg, 16, proto.example.NestedData.fromObject(obj.valueOneofSecond));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.example.Data}
 */
proto.example.Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.example.Data;
  return proto.example.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.example.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.example.Data}
 */
proto.example.Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytesValue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInt32Value(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFixed32Value(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUint32Value(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInt64Value(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setFixed64Value(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUint64Value(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloatValue(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoubleValue(value);
      break;
    case 12:
      var value = new proto.example.NestedData;
      reader.readMessage(value,proto.example.NestedData.deserializeBinaryFromReader);
      msg.setNestedData(value);
      break;
    case 13:
      var value = new proto.example.NestedData;
      reader.readMessage(value,proto.example.NestedData.deserializeBinaryFromReader);
      msg.addNestedDatas(value);
      break;
    case 14:
      var value = msg.getMapNestedDatasMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.example.NestedData.deserializeBinaryFromReader, "", new proto.example.NestedData());
         });
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setValueOneofFirst(value);
      break;
    case 16:
      var value = new proto.example.NestedData;
      reader.readMessage(value,proto.example.NestedData.deserializeBinaryFromReader);
      msg.setValueOneofSecond(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.example.Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.example.Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.example.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.example.Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoolValue();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getStringValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBytesValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getInt32Value();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getFixed32Value();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getUint32Value();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getInt64Value();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getFixed64Value();
  if (f !== 0) {
    writer.writeFixed64(
      8,
      f
    );
  }
  f = message.getUint64Value();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getFloatValue();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getDoubleValue();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getNestedData();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.example.NestedData.serializeBinaryToWriter
    );
  }
  f = message.getNestedDatasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.example.NestedData.serializeBinaryToWriter
    );
  }
  f = message.getMapNestedDatasMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(14, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.example.NestedData.serializeBinaryToWriter);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getValueOneofSecond();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.example.NestedData.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool bool_value = 1;
 * @return {boolean}
 */
proto.example.Data.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.example.Data} returns this
 */
proto.example.Data.prototype.setBoolValue = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string string_value = 2;
 * @return {string}
 */
proto.example.Data.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.example.Data} returns this
 */
proto.example.Data.prototype.setStringValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes bytes_value = 3;
 * @return {!(string|Uint8Array)}
 */
proto.example.Data.prototype.getBytesValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes bytes_value = 3;
 * This is a type-conversion wrapper around `getBytesValue()`
 * @return {string}
 */
proto.example.Data.prototype.getBytesValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytesValue()));
};


/**
 * optional bytes bytes_value = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytesValue()`
 * @return {!Uint8Array}
 */
proto.example.Data.prototype.getBytesValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytesValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.example.Data} returns this
 */
proto.example.Data.prototype.setBytesValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional int32 int32_value = 4;
 * @return {number}
 */
proto.example.Data.prototype.getInt32Value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.example.Data} returns this
 */
proto.example.Data.prototype.setInt32Value = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 fixed32_value = 5;
 * @return {number}
 */
proto.example.Data.prototype.getFixed32Value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.example.Data} returns this
 */
proto.example.Data.prototype.setFixed32Value = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 uint32_value = 6;
 * @return {number}
 */
proto.example.Data.prototype.getUint32Value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.example.Data} returns this
 */
proto.example.Data.prototype.setUint32Value = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 int64_value = 7;
 * @return {number}
 */
proto.example.Data.prototype.getInt64Value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.example.Data} returns this
 */
proto.example.Data.prototype.setInt64Value = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional fixed64 fixed64_value = 8;
 * @return {number}
 */
proto.example.Data.prototype.getFixed64Value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.example.Data} returns this
 */
proto.example.Data.prototype.setFixed64Value = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 uint64_value = 9;
 * @return {number}
 */
proto.example.Data.prototype.getUint64Value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.example.Data} returns this
 */
proto.example.Data.prototype.setUint64Value = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional float float_value = 10;
 * @return {number}
 */
proto.example.Data.prototype.getFloatValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.example.Data} returns this
 */
proto.example.Data.prototype.setFloatValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double double_value = 11;
 * @return {number}
 */
proto.example.Data.prototype.getDoubleValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.example.Data} returns this
 */
proto.example.Data.prototype.setDoubleValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional NestedData nested_data = 12;
 * @return {?proto.example.NestedData}
 */
proto.example.Data.prototype.getNestedData = function() {
  return /** @type{?proto.example.NestedData} */ (
    jspb.Message.getWrapperField(this, proto.example.NestedData, 12));
};


/**
 * @param {?proto.example.NestedData|undefined} value
 * @return {!proto.example.Data} returns this
*/
proto.example.Data.prototype.setNestedData = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.example.Data} returns this
 */
proto.example.Data.prototype.clearNestedData = function() {
  return this.setNestedData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.example.Data.prototype.hasNestedData = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated NestedData nested_datas = 13;
 * @return {!Array<!proto.example.NestedData>}
 */
proto.example.Data.prototype.getNestedDatasList = function() {
  return /** @type{!Array<!proto.example.NestedData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.example.NestedData, 13));
};


/**
 * @param {!Array<!proto.example.NestedData>} value
 * @return {!proto.example.Data} returns this
*/
proto.example.Data.prototype.setNestedDatasList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.example.NestedData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.example.NestedData}
 */
proto.example.Data.prototype.addNestedDatas = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.example.NestedData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.example.Data} returns this
 */
proto.example.Data.prototype.clearNestedDatasList = function() {
  return this.setNestedDatasList([]);
};


/**
 * map<string, NestedData> map_nested_datas = 14;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.example.NestedData>}
 */
proto.example.Data.prototype.getMapNestedDatasMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.example.NestedData>} */ (
      jspb.Message.getMapField(this, 14, opt_noLazyCreate,
      proto.example.NestedData));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.example.Data} returns this
 */
proto.example.Data.prototype.clearMapNestedDatasMap = function() {
  this.getMapNestedDatasMap().clear();
  return this;};


/**
 * optional string value_oneof_first = 15;
 * @return {string}
 */
proto.example.Data.prototype.getValueOneofFirst = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.example.Data} returns this
 */
proto.example.Data.prototype.setValueOneofFirst = function(value) {
  return jspb.Message.setOneofField(this, 15, proto.example.Data.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.example.Data} returns this
 */
proto.example.Data.prototype.clearValueOneofFirst = function() {
  return jspb.Message.setOneofField(this, 15, proto.example.Data.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.example.Data.prototype.hasValueOneofFirst = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional NestedData value_oneof_second = 16;
 * @return {?proto.example.NestedData}
 */
proto.example.Data.prototype.getValueOneofSecond = function() {
  return /** @type{?proto.example.NestedData} */ (
    jspb.Message.getWrapperField(this, proto.example.NestedData, 16));
};


/**
 * @param {?proto.example.NestedData|undefined} value
 * @return {!proto.example.Data} returns this
*/
proto.example.Data.prototype.setValueOneofSecond = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.example.Data.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.example.Data} returns this
 */
proto.example.Data.prototype.clearValueOneofSecond = function() {
  return this.setValueOneofSecond(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.example.Data.prototype.hasValueOneofSecond = function() {
  return jspb.Message.getField(this, 16) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.example.CheckRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.example.CheckRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.example.CheckRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.example.CheckRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    data: (f = msg.getData()) && proto.example.Data.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CheckRequest as accepted by the `fromObject` method.
 * @record
 */
proto.example.CheckRequest.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.data;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.example.CheckRequest.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.example.CheckRequest}
 */
proto.example.CheckRequest.fromObject = function(obj) {
  var msg = new proto.example.CheckRequest();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.data && jspb.Message.setWrapperField(
      msg, 2, proto.example.Data.fromObject(obj.data));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.example.CheckRequest}
 */
proto.example.CheckRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.example.CheckRequest;
  return proto.example.CheckRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.example.CheckRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.example.CheckRequest}
 */
proto.example.CheckRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.example.Data;
      reader.readMessage(value,proto.example.Data.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.example.CheckRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.example.CheckRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.example.CheckRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.example.CheckRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.example.Data.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.example.CheckRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.example.CheckRequest} returns this
 */
proto.example.CheckRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Data data = 2;
 * @return {?proto.example.Data}
 */
proto.example.CheckRequest.prototype.getData = function() {
  return /** @type{?proto.example.Data} */ (
    jspb.Message.getWrapperField(this, proto.example.Data, 2));
};


/**
 * @param {?proto.example.Data|undefined} value
 * @return {!proto.example.CheckRequest} returns this
*/
proto.example.CheckRequest.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.example.CheckRequest} returns this
 */
proto.example.CheckRequest.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.example.CheckRequest.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.example.CheckResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.example.CheckResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.example.CheckResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.example.CheckResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    data: (f = msg.getData()) && proto.example.Data.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CheckResponse as accepted by the `fromObject` method.
 * @record
 */
proto.example.CheckResponse.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.message;

  /** @type {?|undefined} */
  this.data;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.example.CheckResponse.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.example.CheckResponse}
 */
proto.example.CheckResponse.fromObject = function(obj) {
  var msg = new proto.example.CheckResponse();
  obj.message != null && jspb.Message.setField(msg, 1, obj.message);
  obj.data && jspb.Message.setWrapperField(
      msg, 2, proto.example.Data.fromObject(obj.data));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.example.CheckResponse}
 */
proto.example.CheckResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.example.CheckResponse;
  return proto.example.CheckResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.example.CheckResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.example.CheckResponse}
 */
proto.example.CheckResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = new proto.example.Data;
      reader.readMessage(value,proto.example.Data.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.example.CheckResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.example.CheckResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.example.CheckResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.example.CheckResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.example.Data.serializeBinaryToWriter
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.example.CheckResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.example.CheckResponse} returns this
 */
proto.example.CheckResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Data data = 2;
 * @return {?proto.example.Data}
 */
proto.example.CheckResponse.prototype.getData = function() {
  return /** @type{?proto.example.Data} */ (
    jspb.Message.getWrapperField(this, proto.example.Data, 2));
};


/**
 * @param {?proto.example.Data|undefined} value
 * @return {!proto.example.CheckResponse} returns this
*/
proto.example.CheckResponse.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.example.CheckResponse} returns this
 */
proto.example.CheckResponse.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.example.CheckResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.example);
